package org.link_uuid.miningContestMod2026;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.NumberFormat;
import java.util.*;

import net.fabricmc.api.EnvType;
import net.fabricmc.fabric.api.biome.v1.BiomeModifications;
import net.fabricmc.fabric.api.biome.v1.BiomeSelectors;
import net.fabricmc.fabric.api.event.lifecycle.v1.ServerLifecycleEvents;
import net.fabricmc.fabric.api.event.lifecycle.v1.ServerTickEvents;
import net.fabricmc.fabric.api.event.lifecycle.v1.ServerWorldEvents;
import net.fabricmc.fabric.api.event.player.PlayerBlockBreakEvents;
import net.fabricmc.fabric.api.networking.v1.PayloadTypeRegistry;
import net.fabricmc.fabric.api.networking.v1.ServerPlayConnectionEvents;
import net.fabricmc.fabric.api.networking.v1.ServerPlayNetworking;
import net.fabricmc.loader.api.FabricLoader;
import net.minecraft.entity.Entity;
import net.minecraft.network.packet.s2c.play.PositionFlag;
import net.minecraft.registry.RegistryKey;
import net.minecraft.registry.RegistryKeys;
import net.minecraft.scoreboard.*;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.network.ServerPlayerEntity;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.sound.SoundCategory;
import net.minecraft.sound.SoundEvents;
import net.minecraft.util.Formatting;
import net.minecraft.util.Identifier;
import net.minecraft.util.math.Vec3d;
import net.minecraft.world.GameMode;
import net.minecraft.world.TeleportTarget;
import net.minecraft.world.World;
import net.minecraft.world.gen.GenerationStep;
import org.link_uuid.miningContestMod2026.config.json_init;
import org.link_uuid.miningContestMod2026.database.redis.RedisManager;
import org.link_uuid.miningContestMod2026.database.redis.RedisService;
import org.link_uuid.miningContestMod2026.database.redis.ServerTickHandler;
import org.link_uuid.miningContestMod2026.event.RadiationHandler;
import org.link_uuid.miningContestMod2026.packets.*;
import org.link_uuid.miningContestMod2026.server_init.server_init;
import org.link_uuid.miningContestMod2026.variable.Variable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import net.fabricmc.api.ModInitializer;
import net.minecraft.text.Text;

import java.util.concurrent.ThreadLocalRandom;

import static net.minecraft.item.Items.register;
import static org.link_uuid.miningContestMod2026.armor.lead.lead_helmet.lead_equip_init;
import static org.link_uuid.miningContestMod2026.blocks.iodine.iodine_deepslate_ore.iodine_deepslate_ore_init;
import static org.link_uuid.miningContestMod2026.blocks.iodine.iodine_ore.iodine_ore_init;
import static org.link_uuid.miningContestMod2026.blocks.lead.lead_deepslate_ore.lead_deepslate_ore_init;
import static org.link_uuid.miningContestMod2026.blocks.lead.lead_ore.lead_ore_init;
import static org.link_uuid.miningContestMod2026.blocks.uranium.uranium_deepslate_ore.uranium_deepslate_ore;
import static org.link_uuid.miningContestMod2026.blocks.uranium.uranium_deepslate_ore.uranium_deepslate_ore_init;
import static org.link_uuid.miningContestMod2026.blocks.uranium.uranium_ore.*;
import static org.link_uuid.miningContestMod2026.database.redis.RedisService.getServerPlayerAmount;
import static org.link_uuid.miningContestMod2026.items.element_pickaxe.ModItems.*;
import static org.link_uuid.miningContestMod2026.ping_and_mspt.mspt.getCurrentMspt;
import static org.link_uuid.miningContestMod2026.ping_and_mspt.ping.getPingSafe;
import static org.link_uuid.miningContestMod2026.sql.set_lobby.lobbyLoad;

public class MiningContestMod2026 implements ModInitializer {

    public static final String MOD_ID = "mining_contest_mod_2026";
    public static Path CONFIG_DIR;
    public static final Logger LOGGER = LoggerFactory.getLogger(MOD_ID);
    public static int mark = 0;
    public boolean calculated = false;

    // 计分板常量
    String SCOREBOARD_NAME = "my_mod_scores";
    String SCOREBOARD_DISPLAY_NAME = "麥塊夏季挖礦大賽2026工程樣品";
    ScoreboardCriterion criterion = ScoreboardCriterion.DUMMY;  // or another criterion as needed
    Text displayName = Text.of("My Objective");
    ScoreboardCriterion.RenderType renderType = ScoreboardCriterion.RenderType.INTEGER;  // or other render type
    boolean displayAutoUpdate = false;
    NumberFormat numberFormat = null;
    public int tickCounter = 0;

    public static final String SCORE_JOIN_COUNT = "玩家加入次数";
    public static final String SCORE_BLOCKS_MINED = "方块挖掘数";
    public static final String SCORE_MOBS_KILLED = "怪物击杀数";
    public static final String SCORE_ITEMS_CRAFTED = "物品合成数";
    public static final String SCORE_DEATHS = "死亡次数";
    public static final String SCORE_PLAY_TIME = "游戏时间";
    public static int update_counter = 0;
    private Variable variable = new Variable();
    @Override
    public void onInitialize() {
        variable.setSession(1);
        variable.set_player_amount(1);
        RedisManager.initialize();

        json_init.load();
        if (json_init.config.redisEnabled) {
            System.out.println("Configuration loaded: " + json_init.config.redisHost);
        }
        LOGGER.info("Hello Fabric world!");
        if (FabricLoader.getInstance().getEnvironmentType() == EnvType.SERVER) {
        registerServerEvents();
        ServerPlayConnectionEvents.JOIN.register((handler, sender, server) -> {
            ServerPlayerEntity player = handler.getPlayer();
            ServerWorld world = server.getWorld(World.OVERWORLD);
            Set<PositionFlag> flags = Set.of(
                    PositionFlag.X,           // 更新 X 座標
                    PositionFlag.Y,           // 更新 Y 座標
                    PositionFlag.Z,           // 更新 Z 座標
                    PositionFlag.Y_ROT,       // 更新 Y 軸旋轉（yaw）
                    PositionFlag.X_ROT        // 更新 X 軸旋轉（pitch）
            );
            int X = randomInt(-6, 6);
            int Z = randomInt(-6, 6);
            int Y = 265;
            TeleportTarget target = new TeleportTarget(world, new Vec3d(X, Y, Z),  Vec3d.ZERO, 0f, 0f, Entity::baseTick);
            //player.teleportTo(world, X, Y ,Z, flags, 0, 0, true);
            player.changeGameMode(GameMode.ADVENTURE);
            player.teleportTo(target);
            player.sendMessage(Text.literal("歡迎！你已被傳送"), false);
        });
        }
        CONFIG_DIR = FabricLoader.getInstance().getConfigDir().resolve(MOD_ID);
        createConfigDirectory();




        ServerLifecycleEvents.SERVER_STARTING.register(server -> {
            System.out.println("伺服器正在啟動: " + server.getVersion());
            server_init.setServer(server);

        });


        if (FabricLoader.getInstance().getEnvironmentType() == EnvType.SERVER) {
            Map<UUID, Integer> playerUpdateCounters = new HashMap<>();

            ServerPlayConnectionEvents.JOIN.register((handler, sender, server) -> {
                variable.player_amount = server.getCurrentPlayerCount();
                //System.out.println(player_count);
                RedisService.saveServerPlayerAmount(json_init.config.server_index,  variable.player_amount);
                ServerPlayerEntity player = handler.getPlayer();
                UUID playerId = player.getUuid();


                String playeramount = String.valueOf(getServerPlayerAmount(json_init.config.server_index));
                System.out.println("playeramount is "+playeramount);
                // 立即发送初始数据包
                int mspt = getCurrentMspt(server);
                int ping = getPingSafe(player);

                // 正确的发送方式 - 使用 ServerPlayerEntity 而不是 ServerPlayNetworkHandler
                ServerPlayNetworking.send(player, new MsptPackets(mspt));
                ServerPlayNetworking.send(player, new PingPackets(ping));
                ServerPlayNetworking.send(player, new SessionPackets(1));
                ServerPlayNetworking.send(player, new PlayerAmountPackets(playeramount));
                // 初始化计数器
                playerUpdateCounters.put(playerId, 0);

                System.out.println("发送初始数据包给新玩家: " + player.getGameProfile().getName());
            });

            ServerPlayConnectionEvents.DISCONNECT.register((handler, server) -> {
                playerUpdateCounters.remove(handler.getPlayer().getUuid());
            });

            ServerTickEvents.START_SERVER_TICK.register(server -> {
                if (server.getCurrentPlayerCount() < 1) return;

                variable.player_amount = server.getCurrentPlayerCount();
                //System.out.println(player_count);
                RedisService.saveServerPlayerAmount(json_init.config.server_index,  variable.player_amount);


                int mspt = getCurrentMspt(server);

                for (ServerPlayerEntity player : server.getPlayerManager().getPlayerList()) {
                    UUID playerId = player.getUuid();

                    // 确保玩家在计数器中
                    if (!playerUpdateCounters.containsKey(playerId)) {
                        playerUpdateCounters.put(playerId, 19);
                        continue;
                    }

                    int playerCounter = playerUpdateCounters.get(playerId) + 1;
                    playerUpdateCounters.put(playerId, playerCounter);
                    String playeramount = String.valueOf(getServerPlayerAmount(json_init.config.server_index));

                    if (playerCounter >= 20) {
                        // 正确的发送方式
                        ServerPlayNetworking.send(player, new MsptPackets(mspt));
                        int ping = getPingSafe(player);
                        ServerPlayNetworking.send(player, new PingPackets(ping));
                        ServerPlayNetworking.send(player, new SessionPackets(1));
                        ServerPlayNetworking.send(player, new PlayerAmountPackets(playeramount));
                        playerUpdateCounters.put(playerId, 0);
                    }
                }
            });
            /*ServerTickEvents.START_SERVER_TICK.register(server -> {
                if (server.getCurrentPlayerCount() < 1) return;
                int mspt = getCurrentMspt(server);
                update_counter = update_counter + 1;
                for (ServerPlayerEntity player : server.getPlayerManager().getPlayerList()) {
                    if(update_counter == 20){
                        ServerPlayNetworking.send(player, new MsptPackets(mspt));
                        int ping = getPingSafe(player);
                        ServerPlayNetworking.send(player, new PingPackets(ping));
                        ServerPlayNetworking.send(player, new SessionPackets(1));
                        update_counter = 0;
                    }
                }
            });*/
        }


        // 載入設定檔
        loadConfig();
        //ModItems.register();
        // Add item to creative tab
        //ItemGroupEvents.modifyEntriesEvent(ItemGroups.TOOLS).register(entries -> {
       //     entries.add(ModItems.ELEMENT_PICKAXE);
       // });
        pickaxe_init();
        uraniumn_init();
        uranium_init();
        lead_init();
        lead_ore_init();
        lead_equip_init();
        iodine_ore_init();
        iodine_init();
        uranium_deepslate_ore_init();
        lead_deepslate_ore_init();
        iodine_deepslate_ore_init();
        ServerTickEvents.START_SERVER_TICK.register(new ServerTickHandler());

        //PayloadTypeRegistry.playS2C().register(RadiationPackets.ID, RadiationPackets.CODEC);
        if (FabricLoader.getInstance().getEnvironmentType() == EnvType.SERVER) {
            PayloadTypeRegistry.playS2C().register(
                    RadiationPackets.ID,
                    RadiationPackets.CODEC
            );
            PayloadTypeRegistry.playS2C().register(
                    SessionPackets.ID,
                    SessionPackets.CODEC
            );
            PayloadTypeRegistry.playS2C().register(
                    PingPackets.ID,
                    PingPackets.CODEC
            );
            PayloadTypeRegistry.playS2C().register(
                    MsptPackets.ID,
                    MsptPackets.CODEC
            );
            PayloadTypeRegistry.playS2C().register(
                    PlayerAmountPackets.ID,
                    PlayerAmountPackets.CODEC
            );
        }
// In your client-only initializer method


        BiomeModifications.addFeature(
                BiomeSelectors.foundInOverworld(),
                GenerationStep.Feature.UNDERGROUND_ORES,
                RegistryKey.of(
                        RegistryKeys.PLACED_FEATURE,
                        Identifier.of("mining_contest_mod_2026", "uranium_ore_placed")
                )
        );
        BiomeModifications.addFeature(
                BiomeSelectors.foundInOverworld(),
                GenerationStep.Feature.UNDERGROUND_ORES,
                RegistryKey.of(
                        RegistryKeys.PLACED_FEATURE,
                        Identifier.of("mining_contest_mod_2026", "lead_ore_placed")
                )
        );
        BiomeModifications.addFeature(
                BiomeSelectors.foundInOverworld(),
                GenerationStep.Feature.UNDERGROUND_ORES,
                RegistryKey.of(
                        RegistryKeys.PLACED_FEATURE,
                        Identifier.of("mining_contest_mod_2026", "iodine_ore_placed")
                )
        );

        //ServerLifecycleEvents.SERVER_STARTED.register(this::updateScoreboard);
        ServerTickEvents.END_SERVER_TICK.register(RadiationHandler::onServerTick);
        PlayerBlockBreakEvents.AFTER.register((world, player, pos, state, entity) -> {
            if(state.getBlock().equals(uraniumn_ore) || state.getBlock().equals(uranium_deepslate_ore) ){
            //player.sendMessage(Text.literal(state.getBlock().getName().getString()+"5分"), false);
                player.sendMessage(Text.literal("鈾原礦+5分").formatted(Formatting.GREEN),false);
                mark+=5;// 播放音效
                player.getWorld().playSound(
                        null, // null = all nearby players hear it
                        player.getBlockPos(),
                        SoundEvents.ENTITY_EXPERIENCE_ORB_PICKUP,
                        SoundCategory.PLAYERS,
                        1.0f,
                        1.0f
                );
            }
        });


        /*ServerTickEvents.END_SERVER_TICK.register(server -> {
            tickCounter++;

            if (tickCounter >= 20) { // 20 ticks = 1 second
                tickCounter = 0;
                updateScoreboard(server);
            }
        });
        */
    }

    private void registerServerEvents() {
        // 可選：在世界載入完成後執行（更安全）
        ServerWorldEvents.LOAD.register((server, world) -> {
           // if (world.getRegistryKey() == World.OVERWORLD) {
                System.out.println("loaded");
                lobbyLoad();
        //    }
        });
    }


    private void createConfigDirectory() {
        try {
            Files.createDirectories(CONFIG_DIR);
            System.out.println("Config directory created: " + CONFIG_DIR);
        } catch (IOException e) {
            System.err.println("Failed to create config directory: " + CONFIG_DIR);
            e.printStackTrace();
        }
    }

    private void loadConfig() {
        Path configFile = CONFIG_DIR.resolve("config.json");
        // 你的設定檔載入邏輯
    }

    public static int randomInt(int min, int max) {
        // 生成 min 到 max 之間的隨機整數（包含 min 和 max）
        return ThreadLocalRandom.current().nextInt(min, max + 1);
    }

    private void updateScoreboard(MinecraftServer server) {
        Scoreboard scoreboard = server.getScoreboard();
        ScoreboardObjective objective = scoreboard.getNullableObjective(SCOREBOARD_NAME);

        if (objective == null) {
            objective = scoreboard.addObjective(
                    SCOREBOARD_NAME,
                    ScoreboardCriterion.DUMMY,
                    Text.literal(SCOREBOARD_DISPLAY_NAME).formatted(Formatting.GREEN),
                    ScoreboardCriterion.RenderType.INTEGER,
                    false,
                    null
            );
            scoreboard.setObjectiveSlot(ScoreboardDisplaySlot.SIDEBAR, objective);
        }

        // 每秒更新“分數”行
        ScoreAccess score = scoreboard.getOrCreateScore(ScoreHolder.fromName("分數:   " + mark), objective);
        score.setScore(0);
    }
}
